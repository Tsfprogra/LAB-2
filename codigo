import java.time.LocalTime;
import java.util.*; // permite acceder a los paquetes de java directamente
//queue, list, linkedlist, arrayslist


class Voto{
    private int id;
    private int votanteID;
    private int candidatoID;
    private String timestamp;

    public Voto(){
        this.id=0;
        this.votanteID=0;
        this.candidatoID=0;
        this.timestamp="";
    }

    public Voto(int Rid, int RvotanteID, int RcandidatoID, String Rtimestamp){
        this.id = Rid;
        this.votanteID = RvotanteID;
        this.candidatoID = RcandidatoID;
        this.timestamp = Rtimestamp;
    }

    //getters y setters

    int getid(){return id;}
    int getvotanteID(){return votanteID;}
    int getcandidatoID(){return candidatoID;}
    String gettimestamp(){return timestamp;}

    void set_id(int nuevo){
        this.id=nuevo;
    }
    void set_votanteID(int nuevo){
        this.votanteID=nuevo;
    }
    void set_candidatoID(int nuevo){
        this.candidatoID=nuevo;
    }
    void set_timestamp(String nuevo){
        this.timestamp=nuevo;
    }
}

class Candidato{
    private int id;
    private String nombre;
    private String partido;
    private Queue<Voto> votos;//first in first out (cola)

    public Candidato(){
        this.id = 0;
        this.nombre = "";
        this.partido = "";
        this.votos = new ArrayDeque<>();
    }

    public Candidato(int Rid, String Rnombre, String Rpartido){
        this.id = Rid;
        this.nombre = Rnombre;
        this.partido = Rpartido;
        this.votos = new ArrayDeque<>();
    }

    int getid(){return id;}
    String getnombre(){return this.nombre;}
    String getpartido(){return this.partido;}
    Queue<Voto> getvotos(){return this.votos;}

    void set_id(int nuevo){
        this.id=nuevo;
    }
    void set_nombre(String nuevo){
        this.nombre=nuevo;
    }
    void set_partido(String nuevo){
        this.partido=nuevo;
    }
    void set_votos(Voto nuevo){
        this.votos.offer(nuevo);
    }

    public void agregarVotoenCola(Voto v){
        if(v.getcandidatoID()==id){
            votos.offer(v);//se ingreso en la cola;
            System.out.println("voto ingresado correctamente.");
        }else {
            System.out.println("id invalido, no existe candidato con Id ingresada.");
        }
    }
}

class Votante{
    private int id;
    private String nombre;
    private boolean yaVoto;

    public Votante(int Rid, String Rnombre,  boolean RyaVoto){
        this.id = Rid;
        this.nombre = Rnombre;
        this.yaVoto = RyaVoto;
    }

    public  Votante(){
        this.id = 0;
        this.nombre = "";
        this.yaVoto = false;
    }

    //getters y setters

    int getIdV(){return id;}
    String getNombreV(){return nombre;}
    boolean getYaVoto(){return yaVoto;}

    void setIdV(int newid){
        this.id = newid;
    }
    void setNombreV(String newnombre){
        this.nombre = newnombre;
    }
    void setYaVoto(boolean newyaVoto){
        this.yaVoto = newyaVoto;
    }

    void marcarComoVotado(){
        this.yaVoto = true;
    }

}

class UrnaElectoral{
    private LinkedList<Candidato> listaCandidatos = new LinkedList<Candidato>();
    private Stack<Voto> historialVotos = new Stack<>();
    private Queue<Voto> votosReportados = new LinkedList<Voto>();
    private int idCounter;
    private Scanner sc = new Scanner(System.in);

    public UrnaElectoral(){
        this.idCounter = 0;
    }

    public boolean verificarVotante(Votante votante){
            return votante.getYaVoto();
    }

    //Big(n)


    boolean registrarVoto(Votante votante2, int idCandidato2){
        if(!verificarVotante(votante2)){//1
            Voto newvoto = new Voto(//1
                    idCounter++,//1
                    votante2.getIdV(),//1
                    idCandidato2,//1
                    LocalTime.now().toString()//1
            );

            for(Candidato candidato : listaCandidatos){//n
                if(candidato.getid()==idCandidato2){//1
                    candidato.agregarVotoenCola(newvoto);//!
                    historialVotos.push(newvoto);//1
                    votante2.marcarComoVotado();//1
                    return true;
                }
            }
            return false;
        }
        return false;
    }
    //Big (n)


    boolean reportarVoto(Candidato candidato, int idVoto){
        Queue<Voto> aux = candidato.getvotos();
        Voto votoFinal = null;
        for(Voto temp : aux){//n
            if(temp.getid()==idVoto){
                votoFinal = temp;
                break;
            }
        }
        if(votoFinal==null){//1
            System.out.println("voto con  el id de candidato ingresado no encontrado.");
            return false;
        }
         //verificar si hay fraude
        for(Voto temp : votosReportados){//m
            if(temp.getid()==idVoto){
                System.out.println("existe fraude, ya se ha votado con los datos de la persona FRAUDE.");
                return false;
            }
        }
        //remover voto del candidato.
        aux.remove(votoFinal);
        votosReportados.offer(votoFinal);
        return true;
    }
    //Big (n)


    String obtenerResultados(){
        String totalV = "";
        for(Candidato ca : listaCandidatos){
            totalV+= ca.getnombre() +" | " + ca.getvotos().size() + "votos.";
        }
        return totalV;
    }
    public void agregarCandidatoU(Candidato c){

        listaCandidatos.add(c);
    }
        public List<Candidato> getListaCandidatos(){

        return new LinkedList<>(listaCandidatos);
    }

}
class Electo {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        UrnaElectoral urna = new UrnaElectoral();
        List<Votante> listaVotantes = new ArrayList<>();
        int idc=0;

        System.out.println("=================================");
        System.out.println("¿Cuantos candidatos participaran?");
        System.out.println("=================================");
        int candidatos = sc.nextInt();
        sc.nextLine();
        //ciclo que agrega candidatos.
        for (int i = 0; i < candidatos; i++) {
            System.out.println("Candidato " + (i + 1) + ":");
            System.out.println("=================================");
            System.out.print("Nombre: ");
            String nombre = sc.nextLine();
            System.out.println("=================================");
            System.out.print("Partido: ");
            String partido = sc.nextLine();
            System.out.println("=================================");
            Candidato cand = new Candidato(idc++, nombre, partido);
            urna.agregarCandidatoU(cand);
        }
        System.out.println("=================================");
        System.out.println("Registro Votantes.");
        System.out.println("=================================");
        System.out.println("Ingresa cantidad de votantes:");
        int votantes = sc.nextInt();
        System.out.println("=================================");

        for (int i = 0; i < votantes; i++) {
            Votante v = new Votante();
            System.out.println("Ingresa Run(ID) sin puntos y el -");
            int idv = sc.nextInt();
            System.out.print("ingrese nombre:");
            String nombre = sc.nextLine();
            System.out.println("=================================");
            v.setYaVoto(false);//se inicializan todos en false.
            v.setIdV((idv));
            v.setNombreV(nombre);
            listaVotantes.add(v);

        }


        //Menu
        int op;
        do {
            System.out.println("-------------------------------------");
            System.out.println("-------Sistema de votación UDP-------");
            System.out.println("-------------------------------------");
            System.out.println("1. Registrar voto.");
            System.out.println("2. Reportar voto.");
            System.out.println("3. Mostrar resultados.");
            System.out.println("4. Salir.");
            System.out.println("-------------------------------------");
            op = sc.nextInt();

            switch (op) {

                case 1:
                    System.out.println("-------Registrar voto-------");
                    System.out.println("=================================");
                    System.out.print("ingrese id votante:");
                    int idV = sc.nextInt();
                    System.out.println("=================================");
                    boolean aux = false;
                    for (Votante v : listaVotantes) {
                        if (v.getIdV() == idV) {
                            if (v.getYaVoto() == true) {
                                System.out.println("ya voto (fraude).");
                            } else {
                                System.out.println("Lista candidatos");
                                for (Candidato can : urna.getListaCandidatos()) {
                                    System.out.println("=================================");
                                    System.out.println("ID:" + can.getid() + "\nNombre: "
                                            + can.getnombre() + "\nPartido: " + can.getpartido());
                                    System.out.println("=================================");
                                }
                                System.out.print("ingrese id del candidato:");
                                int idC = sc.nextInt();

                                if (urna.registrarVoto(v, idC)) {
                                    System.out.println(" ");
                                } else {
                                    System.out.println("-------Error-------");
                                }
                            }
                            aux = true;
                            break;
                        }
                    }
                    if (!aux) {
                        System.out.println("-------Error (Id invalida)-------");
                    }
                    break;

                case 2:
                    System.out.println("Reportar voto.");
                    System.out.println("Ingrese id candidato:");
                    int idC = sc.nextInt();
                    System.out.println("Ingrese id de voto a reportar:");
                    int idVoto = sc.nextInt();

                    for (Candidato c : urna.getListaCandidatos()) {
                        if (c.getid() == idC) {
                            if (urna.reportarVoto(c, idVoto)) {
                                System.out.println("-------Voto reportado exitosamente.-------");
                            }
                            break;
                        }
                    }
                    break;

                case 3:
                    System.out.println("-------Resultados-------");
                    for (Candidato c : urna.getListaCandidatos()) {
                        System.out.println(c.getnombre() + ":" + c.getvotos().size());
                    }
                    break;
                case 4:
                    System.out.println("Saliendo...");
                    break;
                default:
                    System.out.println("-------Opción invalida-------");
            }
        } while (op != 4);
    }
}
